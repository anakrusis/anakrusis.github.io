ENTRIES = [
	{ 
		"date": new Date("8 March 2024"),
		"text": "The first question, before thinking about stitching the drawings together, is how to project a single flat drawing back onto the curved celestial sphere. The image plane represents the piece of the celestial sphere being observed as it appears to the eye and is drawn-- as a flat image. Placing it right up against the celestial sphere is arbitrary; the image plane could be anywhere between the eye and where it is pictured below, and it will create similar triangles at the same angles with the eye anyways.<br><br><div class=\"left\"><img  src=\"img/figure1.png\"></div>What I am unsure about is if the distances between the points on the flat plane are proportional to the angles on the sphere, as it is a curved surface so the same rules might not apply. Simplifying it to a two-dimensional model, where the image plane is represented by a chord of the circle, does the midpoint of the chord (representing the center of the FOV) bisect the angle subtended by its arc?<br><br><img src=\"img/figure2.png\"><br><br>In this model the FOV is 45° wide (I tried drawing it with the real 6.6° of my binoculars, but the angle is so narrow it is impractical to draw, I would need a much larger resolution image). Inside the unit circle, the FOV is bounded by the lines y=x and x=0. I made the chord using the slope between the points (0,1) and (√(2)/2, √(2)/2).<br><br>Now the angle at the center of the FOV, bisecting it, is halfway between π/4 and π/2 radians (I am switching over to radians for this) which is 3π/8 rad. And to the point at this angle on the circle, from the origin, gives a line of sight of slope ~2.414... which is 1+√(2).<br><br>And the point (which is supposed to be) of the center of the field of view, is the intersection of the chord line and this new angle bisector line. Desmos graphs out the solution as (0.3536, 0.8536), but this is rounded and I would like the exact value, because I want to know if it is exactly the midpoint. First, that slope of m₁, the chord line, can be drastically simplified:<br><br><img src=\"img/figure3.png\" style=\"height:192px;\"><br><br>So the formulas for the two lines are y = (1-√(2))x + 1 for the chord, and y = (1+√(2))x for that line in the middle of the fov. Now using substitution to get the exact x value:<br><br><img src=\"img/figure4.png\"><br><br>And simply plugging in the x value to get the y value:<br><br><img src=\"img/figure5.png\" style=\"height:250px;\"><br><br>which agrees with the earlier approximation (0.3536, 0.8536). This is that point on the chord which is supposed to be the midpoint. To find out if it is, I took the distance formula from here to the two endpoints of the chord:<br><br><img src=\"img/figure6.png\" ><br><br><img src=\"img/figure7.png\" ><br><br>The two distances are exactly the same. Therefore the point (1/(2√(2)), (√(2)+2)/4), which was constructed from a line bisecting the FOV angle, is also the midpoint of the endpoints of the chord (0,1) and (√(2)/2, √(2)/2). This means that the center of the flat image is on the same exact line of sight as the center of the portion of curved surface which is within field of view. But this may be a special case for the center point, so I would also like to test it out with a few non-center points tomorrow. After that, I think i will feel comfortable with the math involved with plotting points from the chord to the circle, so i might be ready then to try plotting points from the plane to the sphere. <br><br><span class=\"comment\">(edit 9 march 2024: i forgot there is an easier way to get the midpoint of a line segment lol, it's ((x₁+x₂)/2, (y₁+y₂)/2). But i guess it was good practice to do it the long way anyways, i havent done algebra in so long i'm so rusty, i feel like i'm back in school again lol) </span>"	
	},
	{ 
		"date": new Date("9 March 2024"),
		"text": "A point on the chord halfway between x = 0 and x = 1/(2√(2)), which is at x = 1/(4√(2)), has a y value of (√(2)+6)/8. This time I used the much simpler midpoint formula to get the x lol, and plugged the x in to get the y: <br><br><img src=\"img/figure8.png\" style=\"height:100px;\"><br><br> This point is the midpoint between the middle of the field of view and its left edge. In this model it represents a star or object as it appears on the view plane that is not immediately in the center of view, but off to the side somewhat. Now I would like to find the point on the circle that is in the line of sight of this point. (This is the reverse of the process yesterday, which was using a point on the circle to get a point on the chord) <br><br><img src=\"img/figure9.png\"><br><br>The slope of the line of sight to this new point is 1 + 3√(2), so the formula for the line of sight is y = 1+3√(2)x. <br><br><img src=\"img/figure10.png\" style=\"height:192px;\"><br><br>And I can already see on the graph that the line of sight does not coincide with the point on the circle, which is at the angle 7π/16 radians, directly between π/2 and 3π/8 radians.<br><br><img src=\"img/figure11.png\" style=\"height:300px;\"><br><br>So it looks like the midpoint of the field of view is a special case where it being halfway across the chord is in the line of sight with the point halfway across the arc, but a point a quarter of the way down the chord is not in line of sight with the point a quarter of the way down the arc. So when i am looking at a point which looks to be exactly between the midpoint and the edge of the field of view, it is not actually halfway between those points on the celestial sphere, but rather there is some error which will need to be calculated.<br><br>Now to generalize for any point on the chord <i>(p, (1-√(2))p + 1)</i>, the slope of the line of sight to the point simplifies to 1-√(2) + (1/p):<br><br><img src=\"img/figure12.png\" style=\"height:150px;\"><br><br><img src=\"img/figure13.gif\"><br><br>That parameter <i>p</i> just stands in for an x coordinate of the point that the line of sight is looking at. But it would be more useful to have it in terms relative to the center of the field of view, which is how the points of data are stored in my drawing samples with (0,0) as the center point. It should be normalized so that 0 is the midpoint on the chord, and -1 and 1 are the edges. Making a little table helps: <br><table><tr><th>q (normalized, range -1 to 1)</th><th>p (range 0 to √(2)/2)</th><th>a (angle)</th></tr><tr><td>-1</td><td>0</td><td>π/2</td></tr><tr><td>0</td><td>1 / 2√(2) or √(2) / 4	</td><td>3π/8</td></tr><tr><td>1</td><td>√(2) / 2</td><td>π/4</td></tr></table>While writing this I realised that you could simplify 1 / 2√(2) to √(2) / 4.<br>The angles on the right side of the table, as proven above, do not necessarily correspond to the line of sight to the points on the chord, but they do line up for the special cases of the midpoint (q=0) and the edges (q=-1, 1). The equation for the angle in relation to q is -(π/8)q + (3π/8).<br><br><img src=\"img/figure14.gif\" style=\"height:384px;\"><br><br>At a glance, the error between the point along the circle and the line of sight appears to be at its greatest at around q = -0.5 and 0.5, and the error is none at q = -1, 0, 1. My hypothesis is that the difference in angle follows a sinusoidal pattern, because it goes negative on one side of q=0 and positive on the other side. And that its amplitude is inversely proportional to the FOV angle, because when it is extremely narrow, it is closer to a straight line and therefore less error overall.<br><br>The slope of the line of sight, here called m₁ (previously the slope of the chord line had this name, but that slope has no name anymore for now) already has the y/x needed to pass into the arctan function, so the actual angle that the line of sight points at is easy to find. And now that the question of whether the points on the circle are proportionally spaced with the points on the chord is put to rest, the other angle getting method with that linear function -(π/8)q + (3π/8) is obselete. (its error could probably be corrected with a sine function added onto it, but that is more a challenge for fun rather than anything practical)<br><br>The next step is to generalize this model for all FOV widths, and such that the whole field of view can turn and cover different areas of the circle."
	},
	{ 
		"date": new Date("17 April 2024"),
		"text": "Before doing any more work on projecting a plane to the sphere, or its model (projecting a line to the circle), I would like to write some core scripts to help get this going faster. I have a growing backlog of data collected which has not yet been touched, and it is becoming impractically large, so these scripts will come in handy:<br><br>--- [] Sample editor. because each sample is a json file and can be simply edited in a text editor, it needs no input method, but must at least display the sample and allow the user to flip between them. Using the editor, every object will be given its own identifier, so that when it appears on multiple samples, they can be composited together to appear as a single object.<br><br>(What will this ID be? probably just a simple string like \"Jupiter\", \"α Car\", \"HD 56733\", etc. Because a catalog number will not do; the planets and galaxies aren't numbered like stars. all will be named however is most convinient)<br><br>--- [] Generate a flat composite image, given a select number of samples. This would be nearly fully automating what I have done in paint.net this whole time. <Br><br>--- --- [] Position the samples relative to each other such that there is the least possible error. My first thought was to brute force this, but there may be a way that minimizes the distances mathematically (Look further into this asap). Planets ignored, (except if multiple samples centered on a planet on the same day?)<br><br>--- --- [] Rotate the samples in compensation for the time difference. This will require several steps of its own:<br><br>--- --- --- [] Convert these local times to UTC and then to Julian. Will need to use my exact longitude, otherwise pretty straightforward<br><Br>--- --- --- [] Then get the sidereal time from the Julian date, which will be an angle that the sky has rotated<br><br>--- --- --- [] Now the tricky part, which I want to visualize out. There is an angle between the center point of a sample, any other point on the sample, and both of these going to the north pole. The amount of apparent rotation seems to depend on the distance to the poles (near the poles they appear to turn completely, and near the equator they just set without turning much?) but i will need to study this more to understand"
	}
]